import { Schedule, WeekDay, WeekType } from '../entities/schedule.entity';
import {
  formatTime,
  getWeekDayName,
  getWeekTypeName,
} from '../utils/date.utils';

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è
export const formatLesson = (lesson: Schedule): string => {
  const startTime = formatTime(lesson.startTime);
  const endTime = formatTime(lesson.endTime);

  let result = `üïí *${startTime} - ${endTime}*\n`;
  result += `üìö *${lesson.subjectName}*\n`;

  if (lesson.teacherName) {
    result += `üë®‚Äçüè´ ${lesson.teacherName}\n`;
  }

  if (lesson.classroom) {
    result += `üè¢ –ê—É–¥–∏—Ç–æ—Ä–∏—è: ${lesson.classroom}\n`;
  }

  if (lesson.weekType !== WeekType.BOTH) {
    result += `üîÑ ${getWeekTypeName(lesson.weekType)}\n`;
  }

  return result;
};

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –¥–µ–Ω—å
export const formatDaySchedule = (
  lessons: Schedule[],
  weekDay: WeekDay
): string => {
  if (lessons.length === 0) {
    return `*${getWeekDayName(
      weekDay
    )}*\n\n–ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç üéâ\n\n_¬© –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞: BivekiGroup (biveki.ru)_`;
  }

  let result = `*${getWeekDayName(weekDay)}*\n\n`;

  lessons.forEach((lesson, index) => {
    result += formatLesson(lesson);

    if (index < lessons.length - 1) {
      result += '\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n';
    }
  });

  result += '\n\n_¬© –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞: BivekiGroup (biveki.ru)_';

  return result;
};

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é
export const formatWeekSchedule = (
  scheduleByDay: Record<WeekDay, Schedule[]>,
  weekType: WeekType
): string => {
  let result = `*–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ ${getWeekTypeName(weekType).toLowerCase()}*\n\n`;

  // –ü–æ—Ä—è–¥–æ–∫ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
  const orderedDays = [
    WeekDay.MONDAY,
    WeekDay.TUESDAY,
    WeekDay.WEDNESDAY,
    WeekDay.THURSDAY,
    WeekDay.FRIDAY,
    WeekDay.SATURDAY,
    WeekDay.SUNDAY,
  ];

  let hasLessons = false;

  for (const day of orderedDays) {
    const lessons = scheduleByDay[day];

    if (lessons && lessons.length > 0) {
      hasLessons = true;
      result += `*${getWeekDayName(day)}*\n`;

      lessons.forEach((lesson) => {
        const startTime = formatTime(lesson.startTime);
        const endTime = formatTime(lesson.endTime);

        result += `üïí ${startTime}-${endTime} | ${lesson.subjectName}`;

        if (lesson.classroom) {
          result += ` | –ê—É–¥. ${lesson.classroom}`;
        }

        result += '\n';
      });

      result += '\n';
    }
  }

  if (!hasLessons) {
    result += '–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç üéâ';
  }

  result += '\n\n_¬© –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞: BivekiGroup (biveki.ru)_';

  return result;
};

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
export const formatGroup = (group: {
  id: number;
  name: string;
  faculty?: string;
  description?: string;
}): string => {
  let result = `*–ì—Ä—É–ø–ø–∞:* ${group.name}\n`;

  if (group.faculty) {
    result += `*–§–∞–∫—É–ª—å—Ç–µ—Ç:* ${group.faculty}\n`;
  }

  if (group.description) {
    result += `*–û–ø–∏—Å–∞–Ω–∏–µ:* ${group.description}\n`;
  }

  return result;
};
