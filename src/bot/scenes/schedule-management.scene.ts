import { Scenes } from 'telegraf';
import { ScheduleService } from '../../services/schedule.service';
import { GroupService } from '../../services/group.service';
import {
  scheduleManagementKeyboard,
  groupSelectionKeyboard,
  weekDaysKeyboard,
  weekTypeKeyboard,
  cancelKeyboard,
  adminMenuKeyboard,
} from '../keyboards';
import { WeekDay, WeekType } from '../../entities/schedule.entity';
import {
  getWeekDayName,
  getWeekTypeName,
  formatTime,
} from '../../utils/date.utils';
import { formatLesson } from '../formatters';

export const SCHEDULE_MANAGEMENT_SCENE_ID = 'SCHEDULE_MANAGEMENT_SCENE';

export const createScheduleManagementScene = () => {
  const scheduleService = new ScheduleService();
  const groupService = new GroupService();

  const scene = new Scenes.BaseScene<Scenes.SceneContext>(
    SCHEDULE_MANAGEMENT_SCENE_ID
  );

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
  interface ScheduleState {
    action: 'add' | 'edit' | 'delete' | 'view';
    step: string;
    groupId?: number;
    groupName?: string;
    scheduleId?: number;
    weekDay?: WeekDay;
    weekType?: WeekType;
    subjectName?: string;
    teacherName?: string;
    classroom?: string;
    startTime?: string;
    endTime?: string;
    schedules?: any[];
  }

  // –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É
  scene.enter(async (ctx) => {
    ctx.scene.session.state = {} as ScheduleState;
    await ctx.reply('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º', scheduleManagementKeyboard());
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É"
  scene.hears('üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É', async (ctx) => {
    await ctx.reply('–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', adminMenuKeyboard());
    return ctx.scene.leave();
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞"
  scene.hears('üîô –û—Ç–º–µ–Ω–∞', async (ctx) => {
    ctx.scene.session.state = {} as ScheduleState;
    await ctx.reply('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', scheduleManagementKeyboard());
  });

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è
  scene.hears('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ', async (ctx) => {
    const state = ctx.scene.session.state as ScheduleState;
    state.action = 'add';
    state.step = 'select_group';

    const groups = await groupService.findAll();
    if (groups.length === 0) {
      await ctx.reply('–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≥—Ä—É–ø–ø. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –≥—Ä—É–ø–ø—É.');
      return ctx.reply('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º', scheduleManagementKeyboard());
    }

    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:', groupSelectionKeyboard(groups));
  });

  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è
  scene.hears('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω—è—Ç–∏–µ', async (ctx) => {
    const state = ctx.scene.session.state as ScheduleState;
    state.action = 'edit';
    state.step = 'select_group';

    const groups = await groupService.findAll();
    if (groups.length === 0) {
      await ctx.reply('–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≥—Ä—É–ø–ø.');
      return ctx.reply('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º', scheduleManagementKeyboard());
    }

    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:', groupSelectionKeyboard(groups));
  });

  // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è
  scene.hears('‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ', async (ctx) => {
    const state = ctx.scene.session.state as ScheduleState;
    state.action = 'delete';
    state.step = 'select_group';

    const groups = await groupService.findAll();
    if (groups.length === 0) {
      await ctx.reply('–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≥—Ä—É–ø–ø.');
      return ctx.reply('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º', scheduleManagementKeyboard());
    }

    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:', groupSelectionKeyboard(groups));
  });

  // –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
  scene.hears('üìã –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è', async (ctx) => {
    const state = ctx.scene.session.state as ScheduleState;
    state.action = 'view';
    state.step = 'select_group';

    const groups = await groupService.findAll();
    if (groups.length === 0) {
      await ctx.reply('–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≥—Ä—É–ø–ø.');
      return ctx.reply('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º', scheduleManagementKeyboard());
    }

    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:', groupSelectionKeyboard(groups));
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  scene.on('text', async (ctx) => {
    const state = ctx.scene.session.state as ScheduleState;
    const text = ctx.message.text;

    // –ï—Å–ª–∏ –Ω–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
    if (!state.action) {
      return ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', scheduleManagementKeyboard());
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
    if (state.step === 'select_group') {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
      if (text === 'üîô –ù–∞–∑–∞–¥') {
        ctx.scene.session.state = {} as ScheduleState;
        await ctx.reply('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º', scheduleManagementKeyboard());
        return;
      }

      const group = await groupService.findByName(text);
      if (!group) {
        return ctx.reply(
          '–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞.'
        );
      }

      state.groupId = group.id;
      state.groupName = group.name;

      if (state.action === 'add') {
        state.step = 'select_day';
        await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:', weekDaysKeyboard());
      } else if (
        state.action === 'edit' ||
        state.action === 'delete' ||
        state.action === 'view'
      ) {
        state.step = 'select_day';
        await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:', weekDaysKeyboard());
      }
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
    if (state.step === 'select_day') {
      const weekDayName = text;

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
      if (text === 'üîô –ù–∞–∑–∞–¥') {
        state.step = 'select_group';
        const groups = await groupService.findAll();
        await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:', groupSelectionKeyboard(groups));
        return;
      }

      const weekDayMap: Record<string, WeekDay> = {
        –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫: WeekDay.MONDAY,
        –í—Ç–æ—Ä–Ω–∏–∫: WeekDay.TUESDAY,
        –°—Ä–µ–¥–∞: WeekDay.WEDNESDAY,
        –ß–µ—Ç–≤–µ—Ä–≥: WeekDay.THURSDAY,
        –ü—è—Ç–Ω–∏—Ü–∞: WeekDay.FRIDAY,
        –°—É–±–±–æ—Ç–∞: WeekDay.SATURDAY,
        –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ: WeekDay.SUNDAY,
      };

      const weekDay = weekDayMap[weekDayName];
      if (!weekDay) {
        return ctx.reply(
          '–ù–µ–≤–µ—Ä–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.'
        );
      }

      state.weekDay = weekDay;

      if (state.action === 'add') {
        state.step = 'select_week_type';
        await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–µ–¥–µ–ª–∏:', weekTypeKeyboard());
      } else if (
        state.action === 'edit' ||
        state.action === 'delete' ||
        state.action === 'view'
      ) {
        state.step = 'select_week_type';
        await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–µ–¥–µ–ª–∏:', weekTypeKeyboard());
      }
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –Ω–µ–¥–µ–ª–∏
    if (state.step === 'select_week_type') {
      const weekTypeName = text;

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
      if (text === 'üîô –ù–∞–∑–∞–¥') {
        state.step = 'select_day';
        await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:', weekDaysKeyboard());
        return;
      }

      const weekTypeMap: Record<string, WeekType> = {
        '–ü–µ—Ä–≤–∞—è –Ω–µ–¥–µ–ª—è': WeekType.FIRST,
        '–í—Ç–æ—Ä–∞—è –Ω–µ–¥–µ–ª—è': WeekType.SECOND,
        '–û–±–µ –Ω–µ–¥–µ–ª–∏': WeekType.BOTH,
      };

      const weekType = weekTypeMap[weekTypeName];
      if (!weekType) {
        return ctx.reply(
          '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –Ω–µ–¥–µ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.'
        );
      }

      state.weekType = weekType;

      if (state.action === 'add') {
        state.step = 'enter_subject';
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:', cancelKeyboard());
      } else if (
        state.action === 'edit' ||
        state.action === 'delete' ||
        state.action === 'view'
      ) {
        // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è –∏ —Ç–∏–ø–∞ –Ω–µ–¥–µ–ª–∏
        const schedules = await scheduleService.findByGroupAndDay(
          state.groupId!,
          state.weekDay!,
          state.weekType
        );

        if (schedules.length === 0) {
          await ctx.reply(
            `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã ${state.groupName} –Ω–∞ ${getWeekDayName(
              state.weekDay!
            )} (${getWeekTypeName(state.weekType)}) –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`
          );
          return ctx.reply(
            '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º',
            scheduleManagementKeyboard()
          );
        }

        if (state.action === 'view') {
          // –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
          let message = `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã ${
            state.groupName
          } –Ω–∞ ${getWeekDayName(state.weekDay!)} (${getWeekTypeName(
            state.weekType
          )}):\n\n`;

          schedules.forEach((schedule, index) => {
            message += `${index + 1}. ${formatLesson(schedule)}\n`;
          });

          await ctx.reply(message);
          return ctx.reply(
            '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º',
            scheduleManagementKeyboard()
          );
        } else {
          // –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –∑–∞–Ω—è—Ç–∏–µ
          let message = '–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–Ω—è—Ç–∏–µ (–≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä):\n\n';

          schedules.forEach((schedule, index) => {
            message += `${index + 1}. ${schedule.subjectName} (${formatTime(
              schedule.startTime
            )} - ${formatTime(schedule.endTime)})\n`;
          });

          state.step = 'select_schedule';
          state.schedules = schedules;
          await ctx.reply(message, cancelKeyboard());
        }
      }
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–Ω—è—Ç–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è
    if (state.step === 'select_schedule') {
      const scheduleIndex = parseInt(text) - 1;

      if (
        isNaN(scheduleIndex) ||
        scheduleIndex < 0 ||
        scheduleIndex >= state.schedules!.length
      ) {
        return ctx.reply(
          '–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–Ω—è—Ç–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä.'
        );
      }

      const selectedSchedule = state.schedules![scheduleIndex];
      state.scheduleId = selectedSchedule.id;

      if (state.action === 'edit') {
        // –ü—Ä–µ–¥–∑–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        state.subjectName = selectedSchedule.subjectName;
        state.teacherName = selectedSchedule.teacherName;
        state.classroom = selectedSchedule.classroom;
        state.startTime = selectedSchedule.startTime;
        state.endTime = selectedSchedule.endTime;

        state.step = 'enter_subject';
        await ctx.reply(
          `–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞: ${state.subjectName}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ (–∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ "–æ—Å—Ç–∞–≤–∏—Ç—å" —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å):`,
          cancelKeyboard()
        );
      } else if (state.action === 'delete') {
        // –£–¥–∞–ª—è–µ–º –∑–∞–Ω—è—Ç–∏–µ
        try {
          if (state.scheduleId !== undefined) {
            await scheduleService.delete(state.scheduleId);
            await ctx.reply(
              `–ó–∞–Ω—è—Ç–∏–µ "${selectedSchedule.subjectName}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.`
            );
          } else {
            await ctx.reply('–û—à–∏–±–∫–∞: ID –∑–∞–Ω—è—Ç–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.');
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–Ω—è—Ç–∏—è:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–Ω—è—Ç–∏—è.');
        }

        return ctx.reply(
          '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º',
          scheduleManagementKeyboard()
        );
      }
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
    if (state.step === 'enter_subject') {
      if (state.action === 'edit' && text.toLowerCase() === '–æ—Å—Ç–∞–≤–∏—Ç—å') {
        // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      } else {
        state.subjectName = text;
      }

      state.step = 'enter_teacher';
      await ctx.reply(
        `${
          state.action === 'edit'
            ? `–¢–µ–∫—É—â–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: ${state.teacherName || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n`
            : ''
        }–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (–∏–ª–∏ "–Ω–µ—Ç" –µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è):`,
        cancelKeyboard()
      );
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    if (state.step === 'enter_teacher') {
      if (text.toLowerCase() === '–Ω–µ—Ç') {
        state.teacherName = undefined;
      } else if (state.action === 'edit' && text.toLowerCase() === '–æ—Å—Ç–∞–≤–∏—Ç—å') {
        // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      } else {
        state.teacherName = text;
      }

      state.step = 'enter_classroom';
      await ctx.reply(
        `${
          state.action === 'edit'
            ? `–¢–µ–∫—É—â–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: ${state.classroom || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n`
            : ''
        }–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏ (–∏–ª–∏ "–Ω–µ—Ç" –µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è):`,
        cancelKeyboard()
      );
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏
    if (state.step === 'enter_classroom') {
      if (text.toLowerCase() === '–Ω–µ—Ç') {
        state.classroom = undefined;
      } else if (state.action === 'edit' && text.toLowerCase() === '–æ—Å—Ç–∞–≤–∏—Ç—å') {
        // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      } else {
        state.classroom = text;
      }

      state.step = 'enter_start_time';
      await ctx.reply(
        `${
          state.action === 'edit'
            ? `–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: ${formatTime(state.startTime!)}\n`
            : ''
        }–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00):`,
        cancelKeyboard()
      );
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
    if (state.step === 'enter_start_time') {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
      const timeRegex = /^([01]?[0-9]|2[0-3]):([0-5][0-9])$/;

      if (state.action === 'edit' && text.toLowerCase() === '–æ—Å—Ç–∞–≤–∏—Ç—å') {
        // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      } else if (!timeRegex.test(text)) {
        return ctx.reply(
          '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00).'
        );
      } else {
        state.startTime = text;
      }

      state.step = 'enter_end_time';
      await ctx.reply(
        `${
          state.action === 'edit'
            ? `–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: ${formatTime(state.endTime!)}\n`
            : ''
        }–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:30):`,
        cancelKeyboard()
      );
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è
    if (state.step === 'enter_end_time') {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
      const timeRegex = /^([01]?[0-9]|2[0-3]):([0-5][0-9])$/;

      if (state.action === 'edit' && text.toLowerCase() === '–æ—Å—Ç–∞–≤–∏—Ç—å') {
        // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      } else if (!timeRegex.test(text)) {
        return ctx.reply(
          '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:30).'
        );
      } else {
        state.endTime = text;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
      try {
        if (state.action === 'add') {
          await scheduleService.create({
            groupId: state.groupId,
            weekDay: state.weekDay,
            weekType: state.weekType,
            subjectName: state.subjectName,
            teacherName: state.teacherName,
            classroom: state.classroom,
            startTime: state.startTime,
            endTime: state.endTime,
          });

          await ctx.reply(
            `–ó–∞–Ω—è—Ç–∏–µ "${state.subjectName}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.`
          );
        } else if (state.action === 'edit') {
          await scheduleService.update(state.scheduleId!, {
            subjectName: state.subjectName,
            teacherName: state.teacherName,
            classroom: state.classroom,
            startTime: state.startTime,
            endTime: state.endTime,
          });

          await ctx.reply(`–ó–∞–Ω—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.`);
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.');
      }

      return ctx.reply('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º', scheduleManagementKeyboard());
    }
  });

  return scene;
};
