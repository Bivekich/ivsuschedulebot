import { Scenes } from 'telegraf';
import { GroupService } from '../../services/group.service';
import {
  groupManagementKeyboard,
  cancelKeyboard,
  adminMenuKeyboard,
  confirmationKeyboard,
} from '../keyboards';
import { formatGroup } from '../formatters';

export const GROUP_MANAGEMENT_SCENE_ID = 'GROUP_MANAGEMENT_SCENE';

export const createGroupManagementScene = () => {
  const groupService = new GroupService();

  const scene = new Scenes.BaseScene<Scenes.SceneContext>(
    GROUP_MANAGEMENT_SCENE_ID
  );

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –≥—Ä—É–ø–ø–µ
  interface GroupState {
    action: 'add' | 'edit' | 'delete' | 'list';
    step: string;
    groupId?: number;
    name?: string;
    faculty?: string;
    description?: string;
    groups?: any[];
  }

  // –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É
  scene.enter(async (ctx) => {
    ctx.scene.session.state = {} as GroupState;
    await ctx.reply('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏', groupManagementKeyboard());
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É"
  scene.hears('üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É', async (ctx) => {
    await ctx.reply('–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', adminMenuKeyboard());
    return ctx.scene.leave();
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞"
  scene.hears('üîô –û—Ç–º–µ–Ω–∞', async (ctx) => {
    ctx.scene.session.state = {} as GroupState;
    await ctx.reply('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', groupManagementKeyboard());
  });

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã
  scene.hears('‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É', async (ctx) => {
    const state = ctx.scene.session.state as GroupState;
    state.action = 'add';
    state.step = 'enter_name';

    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:', cancelKeyboard());
  });

  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
  scene.hears('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—É', async (ctx) => {
    const state = ctx.scene.session.state as GroupState;
    state.action = 'edit';
    state.step = 'select_group';

    const groups = await groupService.findAll();
    if (groups.length === 0) {
      await ctx.reply('–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≥—Ä—É–ø–ø.');
      return ctx.reply('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏', groupManagementKeyboard());
    }

    let message = '–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä):\n\n';
    groups.forEach((group, index) => {
      message += `${index + 1}. ${group.name}\n`;
    });

    state.groups = groups;
    await ctx.reply(message, cancelKeyboard());
  });

  // –£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã
  scene.hears('‚ùå –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É', async (ctx) => {
    const state = ctx.scene.session.state as GroupState;
    state.action = 'delete';
    state.step = 'select_group';

    const groups = await groupService.findAll();
    if (groups.length === 0) {
      await ctx.reply('–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≥—Ä—É–ø–ø.');
      return ctx.reply('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏', groupManagementKeyboard());
    }

    let message = '–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä):\n\n';
    groups.forEach((group, index) => {
      message += `${index + 1}. ${group.name}\n`;
    });

    state.groups = groups;
    await ctx.reply(message, cancelKeyboard());
  });

  // –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
  scene.hears('üìã –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø', async (ctx) => {
    const groups = await groupService.findAll();

    if (groups.length === 0) {
      await ctx.reply('–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≥—Ä—É–ø–ø.');
    } else {
      let message = '–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø:\n\n';
      groups.forEach((group, index) => {
        message += `${index + 1}. ${formatGroup(group)}\n`;
      });

      await ctx.reply(message);
    }

    await ctx.reply('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏', groupManagementKeyboard());
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  scene.on('text', async (ctx) => {
    const state = ctx.scene.session.state as GroupState;
    const text = ctx.message.text;

    // –ï—Å–ª–∏ –Ω–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
    if (!state.action) {
      return ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', groupManagementKeyboard());
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è
    if (state.step === 'select_group') {
      const groupIndex = parseInt(text) - 1;

      if (
        isNaN(groupIndex) ||
        groupIndex < 0 ||
        groupIndex >= state.groups!.length
      ) {
        return ctx.reply(
          '–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä.'
        );
      }

      const selectedGroup = state.groups![groupIndex];
      state.groupId = selectedGroup.id;

      if (state.action === 'edit') {
        // –ü—Ä–µ–¥–∑–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        state.name = selectedGroup.name;
        state.faculty = selectedGroup.faculty;
        state.description = selectedGroup.description;

        state.step = 'enter_name';
        await ctx.reply(
          `–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã: ${state.name}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã (–∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ "–æ—Å—Ç–∞–≤–∏—Ç—å" —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å):`,
          cancelKeyboard()
        );
      } else if (state.action === 'delete') {
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        await ctx.reply(
          `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É "${selectedGroup.name}"?`,
          confirmationKeyboard()
        );
        state.step = 'confirm_delete';
      }
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
    if (state.step === 'confirm_delete') {
      if (text.toLowerCase() === '–¥–∞' || text === '‚úÖ –î–∞') {
        try {
          await groupService.delete(state.groupId!);
          await ctx.reply('–ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.');
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã:', error);
          await ctx.reply(
            '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã. –í–æ–∑–º–æ–∂–Ω–æ, –∫ –Ω–µ–π –ø—Ä–∏–≤—è–∑–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.'
          );
        }

        return ctx.reply('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏', groupManagementKeyboard());
      } else if (text.toLowerCase() === '–Ω–µ—Ç' || text === '‚ùå –ù–µ—Ç') {
        await ctx.reply('–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
        return ctx.reply('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏', groupManagementKeyboard());
      } else {
        return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ "–î–∞" –∏–ª–∏ "–ù–µ—Ç".');
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã
    if (state.step === 'enter_name') {
      if (state.action === 'edit' && text.toLowerCase() === '–æ—Å—Ç–∞–≤–∏—Ç—å') {
        // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      } else {
        state.name = text;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã
        if (state.action === 'add') {
          const existingGroup = await groupService.findByName(state.name);
          if (existingGroup) {
            return ctx.reply(
              '–ì—Ä—É–ø–ø–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.'
            );
          }
        }
      }

      state.step = 'enter_faculty';
      await ctx.reply(
        `${
          state.action === 'edit'
            ? `–¢–µ–∫—É—â–∏–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç: ${state.faculty || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n`
            : ''
        }–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ (–∏–ª–∏ "–Ω–µ—Ç" –µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è):`,
        cancelKeyboard()
      );
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞
    if (state.step === 'enter_faculty') {
      if (text.toLowerCase() === '–Ω–µ—Ç') {
        state.faculty = undefined;
      } else if (state.action === 'edit' && text.toLowerCase() === '–æ—Å—Ç–∞–≤–∏—Ç—å') {
        // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      } else {
        state.faculty = text;
      }

      state.step = 'enter_description';
      await ctx.reply(
        `${
          state.action === 'edit'
            ? `–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: ${state.description || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n`
            : ''
        }–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã (–∏–ª–∏ "–Ω–µ—Ç" –µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è):`,
        cancelKeyboard()
      );
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è
    if (state.step === 'enter_description') {
      if (text.toLowerCase() === '–Ω–µ—Ç') {
        state.description = undefined;
      } else if (state.action === 'edit' && text.toLowerCase() === '–æ—Å—Ç–∞–≤–∏—Ç—å') {
        // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      } else {
        state.description = text;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
      try {
        if (state.action === 'add') {
          await groupService.create({
            name: state.name,
            faculty: state.faculty,
            description: state.description,
          });

          await ctx.reply(`–ì—Ä—É–ø–ø–∞ "${state.name}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.`);
        } else if (state.action === 'edit') {
          await groupService.update(state.groupId!, {
            name: state.name,
            faculty: state.faculty,
            description: state.description,
          });

          await ctx.reply(`–ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.`);
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã.');
      }

      return ctx.reply('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏', groupManagementKeyboard());
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–Ω–æ–ø–æ–∫
  scene.action(/confirm|cancel/, async (ctx) => {
    const state = ctx.scene.session.state as GroupState;

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º any –¥–ª—è –æ–±—Ö–æ–¥–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π
    const callbackData = (ctx.callbackQuery as any).data;

    if (callbackData === 'confirm' && state.step === 'confirm_delete') {
      try {
        await groupService.delete(state.groupId!);
        await ctx.editMessageText('–ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.');
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã:', error);
        await ctx.editMessageText(
          '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã. –í–æ–∑–º–æ–∂–Ω–æ, –∫ –Ω–µ–π –ø—Ä–∏–≤—è–∑–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.'
        );
      }
    } else {
      await ctx.editMessageText('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
    }

    await ctx.reply('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏', groupManagementKeyboard());
  });

  return scene;
};
