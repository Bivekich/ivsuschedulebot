import { Scenes } from 'telegraf';
import { AuthService } from '../../services/auth.service';
import { UserService } from '../../services/user.service';
import { adminMenuKeyboard, cancelKeyboard } from '../keyboards';

export const ADMIN_LOGIN_SCENE_ID = 'ADMIN_LOGIN_SCENE';

export const createAdminLoginScene = () => {
  const authService = new AuthService();
  const userService = new UserService();

  const scene = new Scenes.BaseScene<Scenes.SceneContext>(ADMIN_LOGIN_SCENE_ID);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  interface AdminLoginState {
    username?: string;
    step: 'username' | 'password';
  }

  // –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É
  scene.enter(async (ctx) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    const telegramId = ctx.from?.id.toString();
    if (telegramId) {
      const isAdmin = await authService.isAdmin(telegramId);
      if (isAdmin) {
        await ctx.reply(
          '–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.',
          adminMenuKeyboard()
        );
        return ctx.scene.leave();
      }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    ctx.scene.session.state = { step: 'username' } as AdminLoginState;

    await ctx.reply(
      '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:',
      cancelKeyboard()
    );
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
  scene.hears('üîô –û—Ç–º–µ–Ω–∞', async (ctx) => {
    await ctx.reply('–í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω–∫—É –æ—Ç–º–µ–Ω–µ–Ω.');
    return ctx.scene.leave();
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞
  scene.on('text', async (ctx) => {
    const state = ctx.scene.session.state as AdminLoginState;
    const text = ctx.message.text;

    if (state.step === 'username') {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
      state.username = text;
      state.step = 'password';
      return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:');
    } else if (state.step === 'password' && state.username) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const isValid = await authService.validateAdmin(state.username, text);

      if (isValid) {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        const telegramId = ctx.from.id.toString();
        await authService.setUserAsAdmin(telegramId);

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
        const token = authService.generateToken(telegramId);

        await ctx.reply('–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ –∞–¥–º–∏–Ω–∫—É!', adminMenuKeyboard());
        return ctx.scene.leave();
      } else {
        await ctx.reply(
          '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
        );
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        ctx.scene.session.state = { step: 'username' } as AdminLoginState;
        return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:');
      }
    }
  });

  return scene;
};
