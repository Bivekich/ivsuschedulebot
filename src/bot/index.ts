import { Telegraf, session, Scenes } from 'telegraf';
import * as dotenv from 'dotenv';
import { message } from 'telegraf/filters';
import { UserService } from '../services/user.service';
import { GroupService } from '../services/group.service';
import { ScheduleService } from '../services/schedule.service';
import { AuthService } from '../services/auth.service';
import { mainMenuKeyboard, adminMenuKeyboard } from './keyboards';
import { formatDaySchedule, formatWeekSchedule } from './formatters';
import { getWeekType, getDayOfWeek } from '../utils/date.utils';
import {
  createGroupSelectionScene,
  GROUP_SELECTION_SCENE_ID,
} from './scenes/group-selection.scene';
import {
  createAdminLoginScene,
  ADMIN_LOGIN_SCENE_ID,
} from './scenes/admin-login.scene';
import {
  createGroupManagementScene,
  GROUP_MANAGEMENT_SCENE_ID,
} from './scenes/group-management.scene';
import {
  createScheduleManagementScene,
  SCHEDULE_MANAGEMENT_SCENE_ID,
} from './scenes/schedule-management.scene';
import { addDays } from 'date-fns';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const bot = new Telegraf<Scenes.SceneContext>(process.env.TELEGRAM_BOT_TOKEN!);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
const userService = new UserService();
const groupService = new GroupService();
const scheduleService = new ScheduleService();
const authService = new AuthService();

// –°–æ–∑–¥–∞–µ–º —Å—Ü–µ–Ω—ã
const groupSelectionScene = createGroupSelectionScene();
const adminLoginScene = createAdminLoginScene();
const groupManagementScene = createGroupManagementScene();
const scheduleManagementScene = createScheduleManagementScene();

// –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å—Ü–µ–Ω
const stage = new Scenes.Stage<Scenes.SceneContext>([
  groupSelectionScene,
  adminLoginScene,
  groupManagementScene,
  scheduleManagementScene,
]);

// Middleware
bot.use(session());
bot.use(stage.middleware());

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.start(async (ctx) => {
  try {
    const telegramId = ctx.from.id.toString();
    const user = await userService.findByTelegramId(telegramId);

    if (user && user.group) {
      await ctx.reply(
        `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${user.firstName || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}! –í–∞—à–∞ –≥—Ä—É–ø–ø–∞: ${
          user.group.name
        }`,
        mainMenuKeyboard()
      );
    } else {
      await ctx.reply(
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É.'
      );
      await ctx.scene.enter(GROUP_SELECTION_SCENE_ID);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start:', error);
    await ctx.reply(
      '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /admin
bot.command('admin', async (ctx) => {
  try {
    const telegramId = ctx.from.id.toString();
    const isAdmin = await authService.isAdmin(telegramId);

    if (isAdmin) {
      await ctx.reply('–í—ã –≤–æ—à–ª–∏ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', adminMenuKeyboard());
    } else {
      await ctx.scene.enter(ADMIN_LOGIN_SCENE_ID);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /admin:', error);
    await ctx.reply(
      '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∞–¥–º–∏–Ω–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /group
bot.command('group', async (ctx) => {
  await ctx.scene.enter(GROUP_SELECTION_SCENE_ID);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"
bot.hears('üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', async (ctx) => {
  try {
    const telegramId = ctx.from.id.toString();
    const user = await userService.findByTelegramId(telegramId);

    if (!user || !user.group) {
      await ctx.reply('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É.');
      return ctx.scene.enter(GROUP_SELECTION_SCENE_ID);
    }

    const lessons = await scheduleService.findByGroupForToday(user.groupId);

    if (lessons.length === 0) {
      await ctx.reply(`–°–µ–≥–æ–¥–Ω—è —É –≥—Ä—É–ø–ø—ã ${user.group.name} –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π üéâ`);
    } else {
      const today = new Date();
      const weekDay = getDayOfWeek(today);
      await ctx.reply(formatDaySchedule(lessons, weekDay), {
        parse_mode: 'Markdown',
      });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:', error);
    await ctx.reply(
      '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"
bot.hears('üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞', async (ctx) => {
  try {
    const telegramId = ctx.from.id.toString();
    const user = await userService.findByTelegramId(telegramId);

    if (!user || !user.group) {
      await ctx.reply('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É.');
      return ctx.scene.enter(GROUP_SELECTION_SCENE_ID);
    }

    const tomorrow = addDays(new Date(), 1);
    const weekDay = getDayOfWeek(tomorrow);
    const weekType = getWeekType(tomorrow);

    const lessons = await scheduleService.findByGroupAndDay(
      user.groupId,
      weekDay,
      weekType
    );

    if (lessons.length === 0) {
      await ctx.reply(`–ó–∞–≤—Ç—Ä–∞ —É –≥—Ä—É–ø–ø—ã ${user.group.name} –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π üéâ`);
    } else {
      await ctx.reply(formatDaySchedule(lessons, weekDay), {
        parse_mode: 'Markdown',
      });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞:', error);
    await ctx.reply(
      '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é"
bot.hears('üìö –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é', async (ctx) => {
  try {
    const telegramId = ctx.from.id.toString();
    const user = await userService.findByTelegramId(telegramId);

    if (!user || !user.group) {
      await ctx.reply('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É.');
      return ctx.scene.enter(GROUP_SELECTION_SCENE_ID);
    }

    const today = new Date();
    const weekType = getWeekType(today);

    const scheduleByDay = await scheduleService.findByGroupForCurrentWeek(
      user.groupId
    );

    await ctx.reply(formatWeekSchedule(scheduleByDay, weekType), {
      parse_mode: 'Markdown',
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é:', error);
    await ctx.reply(
      '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É"
bot.hears('üë• –°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É', async (ctx) => {
  await ctx.scene.enter(GROUP_SELECTION_SCENE_ID);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
bot.hears('‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', async (ctx) => {
  const telegramId = ctx.from.id.toString();
  const user = await userService.findByTelegramId(telegramId);

  let message = '–ë–æ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π.\n\n';

  if (user && user.group) {
    message += `–í–∞—à–∞ –≥—Ä—É–ø–ø–∞: ${user.group.name}\n`;
    if (user.group.faculty) {
      message += `–§–∞–∫—É–ª—å—Ç–µ—Ç: ${user.group.faculty}\n`;
    }
  } else {
    message +=
      '–£ –≤–∞—Å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /group –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã.\n';
  }

  message += '\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n';
  message += '/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n';
  message += '/group - –í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É\n';
  message += '/admin - –í–æ–π—Ç–∏ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n';

  message += '\n\n¬© –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–∞–π—Ç–æ–≤, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π BivekiGroup (biveki.ru)';

  await ctx.reply(message);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω–∫–∏
bot.hears('üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏', async (ctx) => {
  const telegramId = ctx.from.id.toString();
  const isAdmin = await authService.isAdmin(telegramId);

  if (isAdmin) {
    await ctx.scene.enter(GROUP_MANAGEMENT_SCENE_ID);
  } else {
    await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
  }
});

bot.hears('üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º', async (ctx) => {
  const telegramId = ctx.from.id.toString();
  const isAdmin = await authService.isAdmin(telegramId);

  if (isAdmin) {
    await ctx.scene.enter(SCHEDULE_MANAGEMENT_SCENE_ID);
  } else {
    await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
  }
});

bot.hears('üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏', async (ctx) => {
  const telegramId = ctx.from.id.toString();
  const isAdmin = await authService.isAdmin(telegramId);

  if (isAdmin) {
    await ctx.reply(
      '–§—É–Ω–∫—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!',
      adminMenuKeyboard()
    );
  } else {
    await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
  }
});

bot.hears('üîô –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏', async (ctx) => {
  await ctx.reply('–í—ã –≤—ã—à–ª–∏ –∏–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', mainMenuKeyboard());
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on(message('text'), async (ctx) => {
  await ctx.reply(
    '–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã /start, /group, /admin.'
  );
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
export const startBot = async () => {
  try {
    await bot.launch();
    console.log('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');

    // –í–∫–ª—é—á–∞–µ–º graceful stop
    process.once('SIGINT', () => bot.stop('SIGINT'));
    process.once('SIGTERM', () => bot.stop('SIGTERM'));
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', error);
  }
};
